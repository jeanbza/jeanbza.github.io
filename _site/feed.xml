<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-10-24T09:15:33-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Jean Barkhuysen</title><subtitle>SWE at Netflix working on distributed media processing/storage. Former Googler working on distributed storage. Former surname de Klerk.
This is my personal website. The views represented here are my own, and do not represent my employer.</subtitle><entry><title type="html">A jj script to lint your entire graph</title><link href="http://localhost:4000/2025/10/06/jj-cleanall.html" rel="alternate" type="text/html" title="A jj script to lint your entire graph" /><published>2025-10-06T02:55:23-06:00</published><updated>2025-10-06T02:55:23-06:00</updated><id>http://localhost:4000/2025/10/06/jj-cleanall</id><content type="html" xml:base="http://localhost:4000/2025/10/06/jj-cleanall.html"><![CDATA[<p>This is the second of a series of posts about <code class="language-plaintext highlighter-rouge">jj</code>. The first is
<a href="/2025/10/06/jj-bash-it.html">A jj plugin for bash-it</a>.</p>

<hr />

<p>At Netflix, we use <a href="https://github.com/diffplug/spotless">the spotless linter</a>.
The main gripe I have with it is that it’s not integrated with any of our IDEs.
In contrast, in Go, <code class="language-plaintext highlighter-rouge">gofmt</code> is integrated with all my IDEs and linting happens
as I program; with spotless I have to remember to run <code class="language-plaintext highlighter-rouge">./gradlew spotlessApply</code>
before I push my changes, or else my PR’s build will break when it gets to the
lint check step.</p>

<p>When I’m working with <code class="language-plaintext highlighter-rouge">jj</code> rev chains, it’s annoying to
<code class="language-plaintext highlighter-rouge">jj edit &lt;rev&gt; &amp;&amp; ./gradlew spotlessApply</code> each and every rev before sending
them all off to be CI/CD’d with <code class="language-plaintext highlighter-rouge">jj git push --all</code>.</p>

<p>So, I made this little script. I hope you’ll find it useful too:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">set</span> <span class="nt">-e</span>
<span class="k">for </span>i <span class="k">in</span> <span class="sb">`</span>jj log <span class="nt">-r</span> <span class="s2">"mutable()"</span> <span class="nt">--no-graph</span> <span class="nt">-T</span> <span class="s1">'change_id ++ "\n"'</span> | <span class="nb">tail</span> <span class="nt">-r</span><span class="sb">`</span><span class="p">;</span> <span class="k">do
  </span>jj edit <span class="nv">$i</span>
  ./gradlew spotlessApply
  ./gradlew spotbugsMain
<span class="k">done
</span>jj log
</code></pre></div></div>

<p>Of course, sub out the for loop with whatever you want to do at each rev.</p>

<p>It makes use of <code class="language-plaintext highlighter-rouge">jj</code>’s
<a href="https://jj-vcs.github.io/jj/latest/templates/">fantastic templating language</a>
to walk the graph from oldgest to newest change, linting as it goes.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[This is the second of a series of posts about jj. The first is A jj plugin for bash-it.]]></summary></entry><entry><title type="html">A jj plugin for bash-it</title><link href="http://localhost:4000/2025/10/06/jj-bash-it.html" rel="alternate" type="text/html" title="A jj plugin for bash-it" /><published>2025-10-06T02:55:23-06:00</published><updated>2025-10-06T02:55:23-06:00</updated><id>http://localhost:4000/2025/10/06/jj-bash-it</id><content type="html" xml:base="http://localhost:4000/2025/10/06/jj-bash-it.html"><![CDATA[<p>This is the first of a series of posts about <code class="language-plaintext highlighter-rouge">jj</code>. The next is
<a href="/2025/10/16/jj-cleanall.html">A jj script to lint your entire graph</a>.</p>

<hr />

<p>I’ve been using <a href="https://github.com/jj-vcs/jj"><code class="language-plaintext highlighter-rouge">jj</code></a> instead of <code class="language-plaintext highlighter-rouge">git</code>, and it’s
been great. One thing I really miss using <code class="language-plaintext highlighter-rouge">git</code>, though, is a nice terminal
prompt that I get from <a href="https://github.com/Bash-it/bash-it"><code class="language-plaintext highlighter-rouge">bash-it</code></a>. So, I
whipped up one for <code class="language-plaintext highlighter-rouge">jj</code>.</p>

<p><img src="/assets/jj.png" alt="jj prompt" /></p>

<p><em>Notice:</em> The prompt now prints |jj:<strong>ty</strong>mnqrpn - readme| and
|jj:<strong>s</strong>ttyyssy|. The coloured short letters (ty, s) are the <code class="language-plaintext highlighter-rouge">jj</code> short prefix,
the full 8 characters are the short rev, and the optional <code class="language-plaintext highlighter-rouge">- readme</code> show the
bookmark associated with the rev if one exists.</p>

<p>I thought I’d post it here if anyone else is looking for this:</p>

<ol>
  <li>
    <p>Create <code class="language-plaintext highlighter-rouge">~/.bash_it/custom/jj.plugins.bash</code> with:</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c"># Set jj prompt to be enabled by default</span>
 <span class="nv">SCM_PROMPT_SHOW_JJ_PRIVATE_INFO</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">SCM_PROMPT_SHOW_JJ_PRIVATE_INFO</span><span class="k">:-</span><span class="nv">true</span><span class="k">}</span><span class="s2">"</span>

 <span class="c"># jj repo check</span>
 <span class="k">function </span>is_jj_repo <span class="o">{</span>
 <span class="k">if</span> <span class="o">[</span> <span class="nt">-d</span> <span class="s2">".jj"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
     return </span>0
 <span class="k">else
     return </span>1
 <span class="k">fi</span>
 <span class="o">}</span>

 <span class="c"># jj prompt</span>
 <span class="k">function </span>jj_prompt_info <span class="o">{</span>
 <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$SCM_PROMPT_SHOW_JJ_PRIVATE_INFO</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"true"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> is_jj_repo<span class="p">;</span> <span class="k">then
     </span><span class="nb">local </span>jj_info
     <span class="nb">local </span>short_hash
     <span class="nb">local </span>jj_bookmarks

     <span class="c"># Get an 8-character short hash and bookmarks</span>
     <span class="nv">short_hash</span><span class="o">=</span><span class="si">$(</span>jj log <span class="nt">-r</span> @ <span class="nt">--no-graph</span> <span class="nt">--template</span> <span class="s1">'change_id.short(8)'</span> 2&gt;/dev/null<span class="si">)</span>
     <span class="nv">jj_bookmarks</span><span class="o">=</span><span class="si">$(</span>jj log <span class="nt">-r</span> @ <span class="nt">--no-graph</span> <span class="nt">--template</span> <span class="s1">'bookmarks.map(|b| b.name())'</span> 2&gt;/dev/null<span class="si">)</span>

     <span class="c"># Exit if we couldn't get a hash</span>
     <span class="k">if</span> <span class="o">[[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$short_hash</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
     return
     fi</span>

     <span class="c"># --- DYNAMIC HIGHLIGHTING ---</span>
     <span class="c"># Get the shortest unique prefix using the template you found</span>
     <span class="nb">local </span><span class="nv">prefix</span><span class="o">=</span><span class="si">$(</span>jj log <span class="nt">-r</span> @ <span class="nt">--no-graph</span> <span class="nt">--template</span> <span class="s1">'self.change_id().shortest()'</span> 2&gt;/dev/null<span class="si">)</span>

     <span class="c"># Fallback: if the command fails, default to the first character. Maybe</span>
     <span class="c"># unnecessary.</span>
     <span class="k">if</span> <span class="o">[[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$prefix</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
     </span><span class="nv">prefix</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">short_hash</span>:0:1<span class="k">}</span><span class="s2">"</span>
     <span class="k">fi</span>

     <span class="c"># Determine the rest of the hash by removing the prefix</span>
     <span class="nb">local </span><span class="nv">rest_of_hash</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">short_hash</span><span class="p">#</span><span class="nv">$prefix</span><span class="k">}</span><span class="s2">"</span>
     <span class="nb">local </span><span class="nv">colored_hash</span><span class="o">=</span><span class="s2">"</span><span class="nv">$MAGENTA$prefix$WHITE$rest_of_hash</span><span class="s2">"</span>

     <span class="c"># Build the base info string: always start with the hash</span>
     <span class="nv">jj_info</span><span class="o">=</span><span class="s2">"</span><span class="nv">$colored_hash</span><span class="s2">"</span>

     <span class="c"># If bookmarks exist, append them</span>
     <span class="k">if</span> <span class="o">[[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$jj_bookmarks</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
     </span><span class="nv">jj_info</span><span class="o">=</span><span class="s2">"</span><span class="nv">$jj_info</span><span class="s2"> - </span><span class="nv">$jj_bookmarks</span><span class="s2">"</span>
     <span class="k">fi</span>

     <span class="c"># Wrap in parentheses</span>
     <span class="nv">jj_info</span><span class="o">=</span><span class="s2">"(</span><span class="nv">$jj_info</span><span class="s2">)"</span>

     <span class="c"># --- ASTERISK LOGIC ---</span>
     <span class="nb">local </span><span class="nv">first_bookmark</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">jj_bookmarks</span><span class="p">%% *</span><span class="k">}</span><span class="s2">"</span>
     <span class="k">if</span> <span class="o">[[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$first_bookmark</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
     </span><span class="nb">local </span>any_diff
     <span class="nv">any_diff</span><span class="o">=</span><span class="si">$(</span>jj diff <span class="nt">--summary</span> <span class="nt">--from</span> <span class="s2">"</span><span class="k">${</span><span class="nv">first_bookmark</span><span class="k">}</span><span class="s2">@origin"</span> 2&gt;/dev/null<span class="si">)</span>
     <span class="k">if</span> <span class="o">[[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$any_diff</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
         </span><span class="nv">jj_info</span><span class="o">=</span><span class="s2">"</span><span class="nv">$jj_info</span><span class="s2">*"</span>
     <span class="k">fi
     fi

     </span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">SCM_THEME_PROMPT_PREFIX</span><span class="k">}</span><span class="s2">jj:</span><span class="k">${</span><span class="nv">jj_info</span><span class="k">}${</span><span class="nv">SCM_THEME_PROMPT_SUFFIX</span><span class="k">}</span><span class="s2">"</span>
 <span class="k">fi</span>
 <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Update <code class="language-plaintext highlighter-rouge">~/.bash_it/themes/&lt;theme&gt;/&lt;theme&gt;.bash</code> (ex
<code class="language-plaintext highlighter-rouge">~/.bash_it/themes/sexy/sexy.bash</code>) to include your prompt next to the <code class="language-plaintext highlighter-rouge">git</code>
prompt:</p>
  </li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>prompt_command<span class="o">()</span> <span class="o">{</span>
  <span class="c"># Old</span>
  <span class="c"># PS1="\[${BOLD}${MAGENTA}\]\u \[$WHITE\]at \[$ORANGE\]\h \[$WHITE\]in \[$GREEN\]\w\[$WHITE\]\$([[ -n \$(git branch 2&gt; /dev/null) ]] &amp;&amp; echo \" on \")\[$PURPLE\]\$(parse_git_branch)\[$WHITE\]\n\$ \[$RESET\]"</span>

  <span class="c"># New</span>
  <span class="nv">PS1</span><span class="o">=</span><span class="s2">"</span><span class="se">\[</span><span class="k">${</span><span class="nv">BOLD</span><span class="k">}${</span><span class="nv">MAGENTA</span><span class="k">}</span><span class="se">\]\u</span><span class="s2"> </span><span class="se">\[</span><span class="nv">$WHITE</span><span class="se">\]</span><span class="s2">at </span><span class="se">\[</span><span class="nv">$ORANGE</span><span class="se">\]\h</span><span class="s2"> </span><span class="se">\[</span><span class="nv">$WHITE</span><span class="se">\]</span><span class="s2">in </span><span class="se">\[</span><span class="nv">$GREEN</span><span class="se">\]\w\[</span><span class="nv">$WHITE</span><span class="se">\]\$</span><span class="s2">([[ -n </span><span class="se">\$</span><span class="s2">(git branch 2&gt; /dev/null) ]] &amp;&amp; echo </span><span class="se">\"</span><span class="s2"> on </span><span class="se">\"</span><span class="s2">)</span><span class="se">\[</span><span class="nv">$PURPLE</span><span class="se">\]\$</span><span class="s2">(parse_git_branch)</span><span class="se">\[</span><span class="nv">$CYAN</span><span class="se">\]</span><span class="si">$(</span>jj_prompt_info<span class="si">)</span><span class="se">\[</span><span class="nv">$WHITE</span><span class="se">\]\n\$</span><span class="s2"> </span><span class="se">\[</span><span class="nv">$RESET</span><span class="se">\]</span><span class="s2">"</span>
</code></pre></div></div>

<p>And then you get some nice <code class="language-plaintext highlighter-rouge">jj</code> prompts!</p>]]></content><author><name></name></author><summary type="html"><![CDATA[This is the first of a series of posts about jj. The next is A jj script to lint your entire graph.]]></summary></entry><entry><title type="html">Storing protobuf-generated Go code without a registry</title><link href="http://localhost:4000/2025/06/10/proto-storage.html" rel="alternate" type="text/html" title="Storing protobuf-generated Go code without a registry" /><published>2025-06-10T02:55:23-06:00</published><updated>2025-06-10T02:55:23-06:00</updated><id>http://localhost:4000/2025/06/10/proto-storage</id><content type="html" xml:base="http://localhost:4000/2025/06/10/proto-storage.html"><![CDATA[<p>Before diving into this topic, you may want to familiarize yourself with <a href="https://go.dev/blog/using-go-modules">Using Go Modules</a> and subsequent posts, or <a href="https://go.dev/ref/mod">the module spec</a>. Go modules work considerably differently than other languages’ dependency management schemes: of particular note to this article is that Go modules are comprised of the code that lives in VCS, as opposed to external registries like Artifactory, pypi, npmjs.org, and so on.</p>

<h2 id="local-protos">Local protos</h2>

<p>The following covers local protos that you own.</p>

<h3 id="that-you-expect-to-be-imported">That you expect to be imported</h3>

<p>If you expect others to import your proto, declare <code class="language-plaintext highlighter-rouge">option go_package</code> and generate Go bindings to that location.</p>

<p>This defines the single source of truth for Go generated code for your proto, making it easy for others to use your proto without needing to generate and store the Go bindings themselves.</p>

<p>For example:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">head </span>protos/server/server.proto
syntax <span class="o">=</span> <span class="s2">"proto3"</span><span class="p">;</span>

package server<span class="p">;</span>

option go_package <span class="o">=</span> <span class="s2">"github.com/username/myrepo/protos/server"</span><span class="p">;</span>
<span class="nv">$ </span>tree
<span class="nb">.</span>
|____protos
| |____server
| | |____server.pb.go
| | |____server.proto
</code></pre></div></div>

<p>Note: Public directories and releasing a tag. Remember that these Go bindings are intended to be import-able, so they should be in a non-<code class="language-plaintext highlighter-rouge">internal/</code> directory. And, if your repo has tagged releases, remember to tag a new release when you generate for the first time, so that others can begin depending on your proto-generated code.</p>

<h3 id="that-you-dont-expect-to-be-imported">That you don’t expect to be imported</h3>

<p>Even if you don’t expect others to import your proto, it’s still best to treat it as if it will be imported.</p>

<p>But, if you’re certain you’ll never want anybody else to import it, give it an <code class="language-plaintext highlighter-rouge">option go_package</code> that generates to an <code class="language-plaintext highlighter-rouge">internal/</code> directory in your Go module and add a comment above explaining that it is not meant to be depended upon.</p>

<p>For example:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">head </span>protos/server/server.proto
syntax <span class="o">=</span> <span class="s2">"proto3"</span><span class="p">;</span>

package server<span class="p">;</span>

// This proto is not intended to be depended upon, and as such always generates
// into an internal/ directory.
option go_package <span class="o">=</span> <span class="s2">"github.com/username/myrepo/internal/protogen/server"</span><span class="p">;</span>
<span class="nv">$ </span>tree
<span class="nb">.</span>
|____protos
| |____server
| | |____server.proto
|____internal
| |____protogen
| | |____server
| | | |____server.pb.go
</code></pre></div></div>

<h2 id="foreign-protos">Foreign protos</h2>

<p>The following covers foreign protos that you don’t own.</p>

<p>WARNING: Never copy <code class="language-plaintext highlighter-rouge">.protos</code>. What follows provides nuance about whether or not to store Go bindings for a proto in your module. However, you should never copy and store a foreign <code class="language-plaintext highlighter-rouge">.proto</code> in your repo.</p>

<h3 id="with-a-single-source-of-truth">With a single source of truth</h3>

<p>If a proto declares <code class="language-plaintext highlighter-rouge">option go_package</code> and provides its Go bindings at that location, that is the single source of truth for its generated Go code and you should import the single source of truth instead of generating and storing your own Go bindings.</p>

<p>If you are generating with <code class="language-plaintext highlighter-rouge">protoc</code>, that means you should not provide <code class="language-plaintext highlighter-rouge">--go_opt=M</code> for the proto.</p>

<p>If you are generating with <code class="language-plaintext highlighter-rouge">buf</code>, that means you should not include the proto in <code class="language-plaintext highlighter-rouge">managed.override</code>.</p>

<h4 id="looking-at-a-concrete-example">Looking at a concrete example</h4>

<p>Here’s a concrete example of that:</p>

<ul>
  <li><a href="https://github.com/googleapis/googleapis/blob/c759e924aa786f3df0e64499daf97d46a27edb31/google/cloud/speech/v1/cloud_speech.proto"><code class="language-plaintext highlighter-rouge">github.com/googleapis/google/cloud/speech/v1/cloud_speech.proto</code></a> is a proto that defines <code class="language-plaintext highlighter-rouge">option go_package = "cloud.google.com/go/speech/apiv1/speechpb;speechpb";</code>.</li>
  <li>Accordingly, its generated Go code exists at <a href="https://github.com/googleapis/google-cloud-go/tree/main/speech/apiv1/speechpb"><code class="language-plaintext highlighter-rouge">github.com/google-cloud-go/speech/apiv1/speechpb</code></a>.
    <ul>
      <li>Note: <code class="language-plaintext highlighter-rouge">cloud.google.com/go</code> is an alias for <code class="language-plaintext highlighter-rouge">github.com/google/google-cloud-go</code>.</li>
    </ul>
  </li>
  <li>If you want to use it,
    <ul>
      <li>✅ You should import it as <code class="language-plaintext highlighter-rouge">speechpb cloud.google.com/go/speech/apiv1/speechpb</code>.</li>
      <li>❌ You should not generate (or store) <code class="language-plaintext highlighter-rouge">cloud_speech.pb.go</code>.</li>
    </ul>
  </li>
</ul>

<h4 id="what-if-a-proto-declares-option-go_package-but-i-cant-import-it">What if a proto declares option go_package, but I can’t import it?</h4>

<p>The proto is incorrectly configured. You should reach out to the proto owners to have them either remove the option go_package or generate the Go bindings at the expected location.</p>

<h3 id="without-a-single-source-of-truth">Without a single source of truth</h3>

<p>If a foreign proto does not declare <code class="language-plaintext highlighter-rouge">option go_package</code>, you have two options:</p>

<ol>
  <li>
    <p>If you can: convince the maintainers to add option go_package, generate their Go bindings at that location, and make it available in a Go module. This is the best option.</p>

    <p>However, this can be a big ask for non-Go teams that aren’t used to maintaining any Go code.And, if it’s a widely used proto there may need to be considerable thought given to how to migrate all existing dependers. So, it may be more pragmatic to:</p>
  </li>
  <li>
    <p>Otherwise: Generate and store their Go bindings in your module. This is risky, since it opens you and others up to the runtime panic described in Proto global registry.</p>

    <p>To mitigate that, store the Go bindings an <code class="language-plaintext highlighter-rouge">internal/</code> directory. If any of your code depends on these Go bindings and is accessible to other modules (is not in <code class="language-plaintext highlighter-rouge">main</code> or <code class="language-plaintext highlighter-rouge">_test</code> package), then it should also be in an <code class="language-plaintext highlighter-rouge">internal/</code> directory. See the discussion on transitive dependencies in Proto global registry.</p>
  </li>
</ol>

<p>Doing so won’t reduce your chance of running into this issue, but it does prevent anyone else accidentally depending on your copy of the Go bindings.</p>

<h2 id="proto-global-registry">Proto global registry</h2>

<p>All protocol buffers declarations linked into a Go binary are inserted into an <a href="https://protobuf.dev/reference/go/faq/#namespace-conflict">in-memory global registry</a>. If two protobuf declarations linked into a Go binary have the same name, then this leads to a namespace conflict. Worse, this error is a runtime error, making it easy to find its way into a deployment.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Before diving into this topic, you may want to familiarize yourself with Using Go Modules and subsequent posts, or the module spec. Go modules work considerably differently than other languages’ dependency management schemes: of particular note to this article is that Go modules are comprised of the code that lives in VCS, as opposed to external registries like Artifactory, pypi, npmjs.org, and so on.]]></summary></entry><entry><title type="html">Generating protobuf-generated Go code without a registry</title><link href="http://localhost:4000/2025/06/10/proto-generation.html" rel="alternate" type="text/html" title="Generating protobuf-generated Go code without a registry" /><published>2025-06-10T01:55:23-06:00</published><updated>2025-06-10T01:55:23-06:00</updated><id>http://localhost:4000/2025/06/10/proto-generation</id><content type="html" xml:base="http://localhost:4000/2025/06/10/proto-generation.html"><![CDATA[<p>I’ve recently had to generate Go code from protos, without the aid of a proto
registry. This article covers my advice for anyone needing to do the same.</p>

<h2 id="generating-go-code-with-protoc">Generating Go code with protoc</h2>

<p>Generating code with <code class="language-plaintext highlighter-rouge">protoc</code> is best for protos that have few or no
dependencies.</p>

<h3 id="simple-code-generation">Simple code generation</h3>

<p>Imagine two simple protos:</p>

<pre><code class="language-pb">// protos/user/user.proto
syntax = "proto3";

package user;

option go_package = "github.com/username/myrepo/protos/user";

message User {
    string name = 1;
}
</code></pre>

<pre><code class="language-pb">// protos/server/server.proto
syntax = "proto3";

package server;

option go_package = "github.com/username/myrepo/protos/server";

import "user/user.proto";

message Server {
    repeated user.User users = 1;
}
</code></pre>

<p>Generate Go code (.pb.gos) from this simple proto with <code class="language-plaintext highlighter-rouge">protoc</code>:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>protoc protos/<span class="k">**</span>/<span class="k">*</span>.proto <span class="se">\</span>
    <span class="nt">--go_out</span><span class="o">=</span>protos <span class="se">\</span>
    <span class="nt">-I</span> protos/ <span class="se">\</span>
    <span class="nt">--go_opt</span><span class="o">=</span><span class="nv">paths</span><span class="o">=</span>source_relative
<span class="nv">$ </span>tree
<span class="nb">.</span>
|____protos
| |____server
| | |____server.pb.go
| | |____server.proto
| |____user
| | |____user.pb.go
| | |____user.proto
</code></pre></div></div>

<p>Warning: This approach allows others to depend on your generated Go code.</p>

<p>This example signs you up to maintaining generated Go code at <code class="language-plaintext highlighter-rouge">github.com/username/myrepo/protos/server</code> and <code class="language-plaintext highlighter-rouge">[...]/protos/user</code>. Whether or not this is a good idea is discussed in “Storing generated code”. For now suffice it to say that instead of declaring <code class="language-plaintext highlighter-rouge">option go_package</code> you could instead provide <code class="language-plaintext highlighter-rouge">--go_opt=M&lt;proto&gt;=&lt;go import&gt;</code>. And, instead of generating your <code class="language-plaintext highlighter-rouge">.pb.go</code>s into the publicly import-able <code class="language-plaintext highlighter-rouge">protos/</code>, you could generate them into an <code class="language-plaintext highlighter-rouge">internal/</code> directory which is not publicly import-able.</p>

<p>If you need to produce gRPC language bindings, add the gRPC option equivalents <code class="language-plaintext highlighter-rouge">--go-grpc_out</code> and <code class="language-plaintext highlighter-rouge">--go_grpc_opt</code>:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>protoc protos/<span class="k">**</span>/<span class="k">*</span>.proto <span class="se">\</span>
    <span class="nt">--go_out</span><span class="o">=</span>protos <span class="se">\</span>
    <span class="nt">--go-grpc_out</span><span class="o">=</span>protos <span class="se">\</span>
    <span class="nt">-I</span> protos/ <span class="se">\</span>
    <span class="nt">--go_opt</span><span class="o">=</span><span class="nv">paths</span><span class="o">=</span>source_relative <span class="se">\</span>
    <span class="nt">--go-grpc_opt</span><span class="o">=</span><span class="nv">paths</span><span class="o">=</span>source_relative
</code></pre></div></div>

<h3 id="foreign-protos">Foreign protos</h3>

<p>Part of your dependency graph may include protos in other repos:</p>

<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// protos/user/user.proto</span>
<span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="kn">package</span> <span class="nn">user</span><span class="p">;</span>

<span class="k">option</span> <span class="na">go_package</span> <span class="o">=</span> <span class="s">"github.com/username/myrepo/protos/user"</span><span class="p">;</span>

<span class="c1">// Not in this repo. Also not repo-rooted, which we'll discuss below. We could</span>
<span class="c1">// change this if we owned user.proto, but if this occurred in a foreign proto</span>
<span class="c1">// that we can't change then we'd have to work around it.</span>
<span class="k">import</span> <span class="s">"non/repo/rooted/import.proto"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="kt">string</span> <span class="na">name</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You’ll need to git clone the foreign protos and include them with <code class="language-plaintext highlighter-rouge">-I</code> during your <code class="language-plaintext highlighter-rouge">protoc</code> invocation.</p>

<p>You’ll may also need to account for quirks, such as:</p>

<ul>
  <li>
    <p>Dealing with imports not rooted at its repo root. Consider your code A importing B, and B importing another proto C, but not at C’s repo root. Instead, B imports C at at <code class="language-plaintext highlighter-rouge">$REPO-ROOT/some/nested/dir</code>. Since you don’t own B (another team / company does), you can’t change B. Get around this with <code class="language-plaintext highlighter-rouge">-I</code> rooted at the place the import expects, as shown below.</p>
  </li>
  <li>
    <p>Dealing with imports that do not define <code class="language-plaintext highlighter-rouge">option go_package</code>. When protos in your dependency graph don’t define <code class="language-plaintext highlighter-rouge">option go_package</code>, you’ll have to tell <code class="language-plaintext highlighter-rouge">protoc</code> which go_package to use with <code class="language-plaintext highlighter-rouge">--go_opt=M&lt;proto&gt;=&lt;go import path&gt;</code>. You’ll probably have to generate the foreign proto’s <code class="language-plaintext highlighter-rouge">.pb.go</code> into your module and point the aforementioned Go import path there, under the assumption that if they haven’t defined an option go_package then it’s also likely they are not generating and publishing Go bindings for you to use.</p>
  </li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">TMP</span><span class="o">=</span><span class="si">$(</span><span class="nb">mktemp</span> <span class="nt">-d</span><span class="si">)</span>
git clone https://github.com/foreignorg/foreignrepo.git <span class="s2">"</span><span class="nv">$TMP</span><span class="s2">/foreign"</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> internal/protogen
protoc protos/<span class="k">**</span>/<span class="k">*</span>.proto <span class="se">\</span>
    non/repo/rooted/import.proto <span class="se">\</span>
    <span class="nt">--go_out</span><span class="o">=</span>internal/protogen <span class="se">\</span>
    <span class="nt">-I</span> protos <span class="se">\</span>
    <span class="nt">--go_opt</span><span class="o">=</span>Muser/user.proto<span class="o">=</span>github.com/username/myrepo/internal/protogen/user <span class="se">\</span>
    <span class="nt">--go_opt</span><span class="o">=</span>Mserver/server.proto<span class="o">=</span>github.com/username/myrepo/internal/protogen/server <span class="se">\</span>
    <span class="nt">-I</span> <span class="nv">$TMP</span>/path/to/expected/import/root <span class="se">\</span>
    <span class="nt">--go_opt</span><span class="o">=</span>Mnon/repo/rooted/import.proto<span class="o">=</span>github.com/foreignorg/foreignrepo/path/to/expected/import/root <span class="se">\</span>
    <span class="nt">--go_opt</span><span class="o">=</span><span class="nv">paths</span><span class="o">=</span>source_relative
</code></pre></div></div>

<p>Which when run would generate:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tree
<span class="nb">.</span>
|____internal
| |____protogen
| | |____server
| | | |____server.pb.go
| | |____user
| | | |____user.pb.go
| | |____non
| | | |____repo
| | | | |____rooted
| | | | | |____import.pb.go
</code></pre></div></div>

<p>Note that all the generated code was generated into <code class="language-plaintext highlighter-rouge">internal/</code>. That involved overwriting <code class="language-plaintext highlighter-rouge">user.proto</code> and <code class="language-plaintext highlighter-rouge">server.proto</code>’s <code class="language-plaintext highlighter-rouge">option go_package</code> with <code class="language-plaintext highlighter-rouge">--go_opt=M</code>. That’s because different generated versions of <code class="language-plaintext highlighter-rouge">import.proto</code> may not exist (directly or transitively) in any Go import graph due to Go’s global proto registry. So, <code class="language-plaintext highlighter-rouge">internal/</code> is used to prevent anybody from depending on these <code class="language-plaintext highlighter-rouge">.pb.go</code>s. Read more on this in “Storing generated code”.</p>

<h3 id="large-dependency-graphs">Large dependency graphs</h3>

<p>Using <code class="language-plaintext highlighter-rouge">protoc</code> becomes progressively more unwieldy the larger your proto dependency graph becomes, since you have to specify all transitive dependencies at <code class="language-plaintext highlighter-rouge">protoc</code> time.</p>

<p>Let’s now look at a better tool for managing larger dependency graphs.</p>

<h2 id="generating-go-code-with-buf">Generating Go code with buf</h2>

<p>Generating code with <code class="language-plaintext highlighter-rouge">buf</code> is better for protos that have more than a few dependencies.</p>

<h3 id="simple-code-generation-1">Simple code generation</h3>

<p>Imagine two simple protos:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// protos/user/user.proto
syntax <span class="o">=</span> <span class="s2">"proto3"</span><span class="p">;</span>

package user<span class="p">;</span>

option go_package <span class="o">=</span> <span class="s2">"github.com/username/myrepo/protos/user"</span><span class="p">;</span>

message User <span class="o">{</span>
    string name <span class="o">=</span> 1<span class="p">;</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// protos/server/server.proto
syntax <span class="o">=</span> <span class="s2">"proto3"</span><span class="p">;</span>

package server<span class="p">;</span>

option go_package <span class="o">=</span> <span class="s2">"github.com/username/myrepo/protos/server"</span><span class="p">;</span>

import <span class="s2">"user/user.proto"</span><span class="p">;</span>

message Server <span class="o">{</span>
    repeated user.User <span class="nb">users</span> <span class="o">=</span> 1<span class="p">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Generate Go code (.pb.gos) from these protos with buf by adding:</p>

<ul>
  <li>
    <p>A <code class="language-plaintext highlighter-rouge">buf.yaml</code>:</p>

    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># buf.yaml</span>
  <span class="c1"># For details on buf.yaml configuration, visit https://buf.build/docs/configuration/v2/buf-yaml</span>
  <span class="na">version</span><span class="pi">:</span> <span class="s">v2</span>
  <span class="na">lint</span><span class="pi">:</span>
  <span class="na">use</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">STANDARD</span>
  <span class="na">breaking</span><span class="pi">:</span>
  <span class="na">use</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">FILE</span>
  <span class="na">modules</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">protos/</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>A <code class="language-plaintext highlighter-rouge">buf.gen.yaml</code>:</p>

    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># buf.gen.yaml</span>
  <span class="c1"># For details on buf.yaml configuration, visit https://buf.build/docs/configuration/v2/buf-gen-yaml</span>
  <span class="na">version</span><span class="pi">:</span> <span class="s">v2</span>
  <span class="na">plugins</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">remote</span><span class="pi">:</span> <span class="s">buf.build/protocolbuffers/go:v1.36.6</span>
      <span class="s">out</span><span class="err">:</span> <span class="s">protos</span>
      <span class="s">opt</span><span class="err">:</span>
      <span class="pi">-</span> <span class="s">paths=source_relative</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>Generate code with <code class="language-plaintext highlighter-rouge">buf generate</code>:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>buf generate
<span class="nv">$ </span>tree
<span class="nb">.</span>
|____protos
| |____server
| | |____server.pb.go
| | |____server.proto
| |____user
| | |____user.pb.go
| | |____user.proto
</code></pre></div></div>

<p>Warning: This approach allows others to depend on your generated Go code.</p>

<p>This example signs you up to maintaining generated Go code at <code class="language-plaintext highlighter-rouge">github.com/username/myrepo/protos/server</code> and <code class="language-plaintext highlighter-rouge">[...]/protos/user</code>. Whether or not this is a good idea is discussed in “Storing generated code”. For now suffice it to say that instead of declaring <code class="language-plaintext highlighter-rouge">option go_package</code> you could instead provide <code class="language-plaintext highlighter-rouge">--go_opt=M&lt;proto&gt;=&lt;go import&gt;</code>. And, instead of generating your <code class="language-plaintext highlighter-rouge">.pb.go</code>s into the publicly import-able <code class="language-plaintext highlighter-rouge">protos/</code>, you could generate them into an <code class="language-plaintext highlighter-rouge">internal/</code> directory which is not publicly import-able.</p>

<p>If you need to produce gRPC language bindings, add the gRPC plugin to <code class="language-plaintext highlighter-rouge">buf.gen.yaml</code>:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># buf.gen.yaml</span>
<span class="na">version</span><span class="pi">:</span> <span class="s">v2</span>
<span class="na">plugins</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">remote</span><span class="pi">:</span> <span class="s">buf.build/protocolbuffers/go:v1.36.6</span>
    <span class="na">out</span><span class="pi">:</span> <span class="s">protos</span>
    <span class="na">opt</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">paths=source_relative</span>
  <span class="pi">-</span> <span class="na">remote</span><span class="pi">:</span> <span class="s">buf.build/grpc/go:v1.5.1</span>
    <span class="na">out</span><span class="pi">:</span> <span class="s">protos</span>
    <span class="na">opt</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">paths=source_relative</span>
</code></pre></div></div>

<h3 id="foreign-protos-1">Foreign protos</h3>

<p>Part of your dependency graph may include protos in other repos:</p>

<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// protos/user/user.proto</span>
<span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="kn">package</span> <span class="nn">user</span><span class="p">;</span>

<span class="k">option</span> <span class="na">go_package</span> <span class="o">=</span> <span class="s">"github.com/username/myrepo/protos/user"</span><span class="p">;</span>

<span class="c1">// Not in this repo. Also not repo-rooted, which we'll discuss below. We could</span>
<span class="c1">// change this if we owned user.proto, but if this occurred in a foreign proto</span>
<span class="c1">// that we can't change then we'd have to work around it.</span>
<span class="k">import</span> <span class="s">"non/repo/rooted/import.proto"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="kt">string</span> <span class="na">name</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Foreign protos that are neither in your repo nor the Buf Schema Registry (BSR) can be imported, but in a roundabout way. You’ll need to git clone them yourself and include them as modules in buf.yaml.</p>

<p>Before we do so, let’s quickly recap proto quirks you might run into, described above in “Generating code with protoc: Foreign protos”. We’ll need to contend with the fact that the <code class="language-plaintext highlighter-rouge">import.proto</code> import was not rooted at its repo root, and that <code class="language-plaintext highlighter-rouge">import.proto</code> does not define <code class="language-plaintext highlighter-rouge">option go_package</code>.</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># buf.yaml</span>
<span class="na">version</span><span class="pi">:</span> <span class="s">v2</span>
<span class="na">lint</span><span class="pi">:</span>
  <span class="na">use</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">STANDARD</span>
<span class="na">breaking</span><span class="pi">:</span>
  <span class="na">use</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">FILE</span>
<span class="na">modules</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">protos/</span>
  <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">tmp/path/to/expected/import/root</span>
</code></pre></div></div>

<p>The non-repo rooted import is handled by specifying the path at which the <code class="language-plaintext highlighter-rouge">import "non/repo/rooted/...";</code> import works.</p>

<p>To handle the lack of <code class="language-plaintext highlighter-rouge">option go_package</code>, we’ll need to turn on managed mode in <code class="language-plaintext highlighter-rouge">buf.gen.yaml</code>:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># buf.gen.yaml</span>
<span class="na">version</span><span class="pi">:</span> <span class="s">v2</span>
<span class="na">plugins</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">remote</span><span class="pi">:</span> <span class="s">buf.build/protocolbuffers/go:v1.36.6</span>
    <span class="na">out</span><span class="pi">:</span> <span class="s">internal/protogen</span>
    <span class="na">opt</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">paths=source_relative</span>
<span class="na">managed</span><span class="pi">:</span>
  <span class="na">enabled</span><span class="pi">:</span> <span class="kc">true</span>
  <span class="na">override</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">file_option</span><span class="pi">:</span> <span class="s">go_package_prefix</span>
      <span class="na">path</span><span class="pi">:</span> <span class="s">non/repo/rooted/</span>
      <span class="na">value</span><span class="pi">:</span> <span class="s">github.com/foreignorg/foreignrepo/path/to/expected/import/root</span>
    <span class="pi">-</span> <span class="na">file_option</span><span class="pi">:</span> <span class="s">go_package_prefix</span>
      <span class="na">path</span><span class="pi">:</span> <span class="s">user/user.proto</span>
      <span class="na">value</span><span class="pi">:</span> <span class="s">github.com/username/myrepo/internal/protogen</span>
    <span class="pi">-</span> <span class="na">file_option</span><span class="pi">:</span> <span class="s">go_package_prefix</span>
      <span class="na">path</span><span class="pi">:</span> <span class="s">server/server.proto</span>
      <span class="na">value</span><span class="pi">:</span> <span class="s">github.com/username/myrepo/internal/protogen</span>
</code></pre></div></div>

<p>Next, let’s perform the <code class="language-plaintext highlighter-rouge">git clone</code> and <code class="language-plaintext highlighter-rouge">tmp/</code> management:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/foreignorg/foreignrepo.git tmp/foreign
buf generate
</code></pre></div></div>

<p>Which when run generates:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tree
<span class="nb">.</span>
|____internal
| |____protogen
| | |____server
| | | |____server.pb.go
| | |____user
| | | |____user.pb.go
| | |____non
| | | |____repo
| | | | |____rooted
| | | | | |____import.pb.go
</code></pre></div></div>

<p>Note that all the generated code was generated into <code class="language-plaintext highlighter-rouge">internal/</code>. That involved overwriting <code class="language-plaintext highlighter-rouge">user.proto</code> and <code class="language-plaintext highlighter-rouge">server.proto</code>’s <code class="language-plaintext highlighter-rouge">option go_package</code> with <code class="language-plaintext highlighter-rouge">--go_opt=M</code>. That’s because different generated versions of <code class="language-plaintext highlighter-rouge">import.proto</code> may not exist (directly or transitively) in any Go import graph due to Go’s global proto registry. So, <code class="language-plaintext highlighter-rouge">internal/</code> is used to prevent anybody from depending on these <code class="language-plaintext highlighter-rouge">.pb.go</code>s. Read more on this in “Storing generated code”.</p>

<h3 id="concurrent-git-clones">Concurrent git clones</h3>

<p>If you have many <code class="language-plaintext highlighter-rouge">git clone</code> statements, consider using <code class="language-plaintext highlighter-rouge">&amp;</code> and <code class="language-plaintext highlighter-rouge">wait</code> to run them concurrently:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone ... &amp;
git clone ... &amp;
git clone ... &amp;
<span class="nb">wait
</span>buf generate
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[I’ve recently had to generate Go code from protos, without the aid of a proto registry. This article covers my advice for anyone needing to do the same.]]></summary></entry><entry><title type="html">Spock gripes</title><link href="http://localhost:4000/2025/02/26/spock.html" rel="alternate" type="text/html" title="Spock gripes" /><published>2025-02-26T00:55:23-07:00</published><updated>2025-02-26T00:55:23-07:00</updated><id>http://localhost:4000/2025/02/26/spock</id><content type="html" xml:base="http://localhost:4000/2025/02/26/spock.html"><![CDATA[<p>I’ve recently been using Spock, the Groovy test framework. I’ve got several
gripes with it that I wanted to document. This is mostly for my future self,
but may be interesting to others.</p>

<h2 id="subtests">Subtests</h2>

<p><code class="language-plaintext highlighter-rouge">@Unroll</code> with a data provider is the way to run subtests. I have a major and a minor qualm with this:</p>

<ul>
  <li>
    <p>Major: You can’t run a single subtest (for example with <code class="language-plaintext highlighter-rouge">./gradlew test --tests “*some test*”</code>).</p>
  </li>
  <li>
    <p>Minor: For dynamic data providers you have to create a whole ‘nother class. It’s much more cumbersome than I’d prefer.</p>
  </li>
</ul>

<h2 id="fixed-parallelism">Fixed parallelism</h2>

<p>I should be able to run any number of tests concurrently. Indeed with Spock I can do that as described <a href="https://spockframework.org/spock/docs/2.0-M4/parallel_execution.html">here</a>. But, despite the appearance of supporting fixed test parallelism, it actually supports fixed execution parallelism. This leads to very surprising behaviour, as documented at <a href="https://github.com/spockframework/spock/issues/2117">spockframework/spock/issues/2117</a>.</p>

<h2 id="poor-diff-quality">Poor diff quality</h2>

<p>Here’s a Groovy diff comparing a want proto to a got proto:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Gradle Test Executor 102 &gt; EndToEndSpec &gt; assembleVideoForAimLow FAILED
    Condition not satisfied:

    GrpcUtils.invokeFunction(stub, in) == want
    |         |              |     |   |  |
    |         |              |     |   |  is_completed: true
    |         |              |     |   |  is_successful: true
    |         |              |     |   |  success_response {
    |         |              |     |   |    class_name: "com.netflix.stratum.pod.functions.functions.protogen.HelloResponse"
    |         |              |     |   |    value {
    |         |              |     |   |      fields {
    |         |              |     |   |        key: "response"
    |         |              |     |   |        value {
    |         |              |     |   |          string_value: "Hello from POD world, my name is red. Here is CosmosPode2eFunction"
    |         |              |     |   |        }
    |         |              |     |   |      }
    |         |              |     |   |    }
    |         |              |     |   |  }
    |         |              |     |   false
    |         |              |     {
    |         |              |       "fullFunctionName": "com.netflix.stratum.pod.functions.AimLowVideoAssembler.assembleVideoForAimLow",
    |         |              |       "arguments": [
    |         |              |         {
    |         |              |           "name": "listOfMountedEncodes",
    |         |              |           "cloudObjects": {
    |         |              |             "cloudObjects": [
    |         |              |               {
    |         |              |                 "url": "baggins://reloaded-test-temp/cosmos-e2e-tests/1730401804568/AIMLOWVIDEOENCODE_chunk.al"
    |         |              |               }
    |         |              |             ]
    |         |              |           }
    |         |              |         },
    |         |              |         {
    |         |              |           "name": "assembeledVideoOutput",
    |         |              |           "direction": "OUTPUT_REF",
    |         |              |           "cloudObject": {
    |         |              |             "url": "baggins://reloaded-test-temp/cosmos-e2e-tests/1730401982908/assembledVideo.lo"
    |         |              |           }
    |         |              |         }
    |         |              |       ],
    |         |              |       "stack": ""
    |         |              |     }
    |         |              &lt;com.netflix.stratumintegtest.protogen.StratumIntegtestServiceGrpc$StratumIntegtestServiceBlockingStub@6f1dd321 channel=ManagedChannelOrphanWrapper{delegate=ManagedChannelImpl{logId=19, target=localhost:53139}} callOptions=CallOptions{deadline=null, authority=null, callCredentials=null, executor=null, compressorName=null, customOptions=[[internal-stub-type, BLOCKING]], waitForReady=false, maxInboundMessageSize=null, maxOutboundMessageSize=null, streamTracerFactories=[]}&gt;
    |         is_completed: true
    |         is_successful: true
    |         success_response {
    |           class_name: "com.google.protobuf.Empty"
    |           value {
    |           }
    |         }
    class GrpcUtils
        at EndToEndSpec.assembleVideoForAimLow(EndToEndSpec.groovy:73)

1 test completed, 1 failed
</code></pre></div></div>

<p>Can you tell the problem!? Nope! It’s inscrutable.</p>

<p>Here’s the two side-by-side, by the way:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    ---------- got:
    is_completed: true
    is_successful: true
    success_response {
      class_name: "com.google.protobuf.Empty"
      value {
      }
    }

    ---------- want:
    is_completed: true
    is_successful: true
    success_response {
      class_name: "com.netflix.stratum.pod.functions.functions.protogen.HelloResponse"
      value {
        fields {
          key: "response"
          value {
            string_value: "Hello from POD world, my name is red. Here is CosmosPode2eFunction"
          }
        }
      }
    }
</code></pre></div></div>

<p>See how much easier that is to understand? That Spock diff is inexcusably bad.</p>

<h2 id="poor-logging-support">Poor logging support</h2>

<p>Preface: This is not a Java-ecosystem issue that’s not specific to Spock.</p>

<p>So you’ve got bad diffs, but you think you’ll <code class="language-plaintext highlighter-rouge">println(got, want)</code> to get around them, right? Nope! Because printlns don’t show up when you run your tests. That’s right! You have to turn on info logging first (for example, <code class="language-plaintext highlighter-rouge">./gradlew test --info</code>). But, the problem is, everything info logs.</p>

<p>I ran a single test, whose project has 6 ~small dependencies. It generated 689 lines of output. So, good luck finding your println in several hundreds (on the low end?) lines of output.</p>

<p>(FWIW for fun I ran the same test with <code class="language-plaintext highlighter-rouge">--debug</code> and got 32,313 lines. Nice!)</p>

<h2 id="dynamic-property-resolution">Dynamic property resolution</h2>

<p>Preface: This is a Groovy issue, not Spock.</p>

<p>Groovy closures use dynamic property resolution. This has the effect of things that should be compilation issues only being surfaced during runtime.</p>

<p>For example, if you want to retry until something happens, you might use Spock’s PollingConditions, whose <code class="language-plaintext highlighter-rouge">eventually</code> takes a closure. If you have compilations in that closure, you’re going to compile, run, retry until you time out, and only after that will your compilation error be surfaced. This is an insane loss of productivity considering that Groovy is built on a strongly typed language!</p>

<h2 id="verbosity-magic-and-assertions">Verbosity, magic, and assertions</h2>

<p>Spock looks for any function that has an <code class="language-plaintext highlighter-rouge">expect:</code> or <code class="language-plaintext highlighter-rouge">then:</code> block, and calls it a test. This is needlessly magical, adds a lot of verbosity (what if I just want a <code class="language-plaintext highlighter-rouge">1==1</code> simple assertion? I need to go add <code class="language-plaintext highlighter-rouge">expect:</code> first), and restrain what you can do (it’s harder to have utility functions doing assertions, because it’d require an expect: block, which now means your utility function is a test!).</p>

<p>The assertions are not particularly enjoyable, either. Groovy looks for any free boolean: whether a direct comparison like <code class="language-plaintext highlighter-rouge">1 == 1</code>, or a function that returns a boolean like <code class="language-plaintext highlighter-rouge">myOptional.isPresent</code>, and calls that an assertion. This is too magical and completely uncustomisable.</p>

<p>For example, let’s say that I spend 30s waiting for something to happen. The assertion would look like <code class="language-plaintext highlighter-rouge">retryUntil(...).success</code>, and failure in groovy is just going to be “false expected to be true”. What I want is something like, <code class="language-plaintext highlighter-rouge">retryUntil(...).success &lt;&lt; “waited 30s for &lt;whatever&gt;, but timed out without success”</code> (using C++’s assertion annotation syntax there). That provides a meaningful message to the reader. But, you can’t do that in Spock!</p>]]></content><author><name></name></author><summary type="html"><![CDATA[I’ve recently been using Spock, the Groovy test framework. I’ve got several gripes with it that I wanted to document. This is mostly for my future self, but may be interesting to others.]]></summary></entry><entry><title type="html">Running your own pkgsite</title><link href="http://localhost:4000/2025/01/29/pkgsite.html" rel="alternate" type="text/html" title="Running your own pkgsite" /><published>2025-01-29T00:55:23-07:00</published><updated>2025-01-29T00:55:23-07:00</updated><id>http://localhost:4000/2025/01/29/pkgsite</id><content type="html" xml:base="http://localhost:4000/2025/01/29/pkgsite.html"><![CDATA[<h2 id="who-this-is-for">Who this is for</h2>

<p>Netflix has a private enterprise GitHub (and goproxy), which means that
<a href="https://pkg.go.dev/golang.org/x/pkgsite">pkgsite</a> does not crawl it. I set out
to run pkgsite myself against this private enterprise GitHub.</p>

<p>This article is for anyone else setting out to do similarly.</p>

<h2 id="understanding-pkgsite">Understanding pkgsite</h2>

<p><a href="https://github.com/golang/pkgsite/blob/master/doc/design.md">github.com/golang/pkgsite/blob/master/doc/design.md</a>
describes pkgsite’s components.
<a href="https://sum.golang.org/">sum.golang.org</a> describes the proxy and index that
enables pkgsite.</p>

<h3 id="code-layout">Code layout</h3>

<p>pkgsite is canonically hosted at <a href="https://go.googlesource.com/pkgsite">go.googlesource.com/pkgsite</a>
and can be cloned with <code class="language-plaintext highlighter-rouge">git clone https://go.googlesource.com/pkgsite</code>. The
important parts for this article are,</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tree
<span class="nb">.</span>
|____cmd
| |____frontend
| | |____main.go
| |____pkgsite
| | |____main.go
| |____worker
| | |____main.go
|____migrations
| |____000073_create_documentation_symbols.down.sql
| |____000018_add_module_version_states_status_index.up.sql
| |____...etc...
|____devtools
| |____cmd
| | |____seeddb
| | | |____seed.txt
| | | |____main.go
</code></pre></div></div>

<p>Let’s quickly describe each:</p>

<ul>
  <li><strong>cmd/pkgsite</strong>: The simplest and best documented. Running this lets you host
a minimal pkgsite. It’s not connected to a database and doesn’t have a worker
searching for modules. So, it doesn’t have a usable search feature. It’s useful
for looking at one or two of your own projects but without search, it’s not good
enough for an entire org.</li>
  <li><strong>frontend</strong>: The web-serving frontend. When run, serves the frontend at
<code class="language-plaintext highlighter-rouge">localhost:8080</code>.</li>
  <li><strong>worker</strong>: The data-fetching backend that updates the database. When run,
serves a work management page at <code class="language-plaintext highlighter-rouge">localhost:8000</code>.</li>
  <li><strong>migrations</strong>: A series of sql scripts that when run in order will set up
all the necessary tables and schemas.</li>
  <li><strong>seeddb</strong>: A one-shot program that reads a <code class="language-plaintext highlighter-rouge">seed.txt</code> file, fetches modules
listed there-in, and populates the database with the information.</li>
</ul>

<h3 id="modifiable-config">Modifiable config</h3>

<p>The frontend and worker both use <code class="language-plaintext highlighter-rouge">internal/config/serverconfig/config.go</code>, which
is modifiable with environment variables. Here’s a few you may care about:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Proxy config.
ProxyURL:   GetEnv("GO_MODULE_PROXY_URL", "https://proxy.golang.org"),

# Database config.
DBHost:               chooseOne(GetEnv("GO_DISCOVERY_DATABASE_HOST", "localhost")),
DBUser:               GetEnv("GO_DISCOVERY_DATABASE_USER", "postgres"),
DBPassword:           os.Getenv("GO_DISCOVERY_DATABASE_PASSWORD"),
DBSecondaryHost:      chooseOne(os.Getenv("GO_DISCOVERY_DATABASE_SECONDARY_HOST")),
DBPort:               GetEnv("GO_DISCOVERY_DATABASE_PORT", "5432"),
DBName:               GetEnv("GO_DISCOVERY_DATABASE_NAME", "discovery-db"),
</code></pre></div></div>

<h2 id="running-pkgsite">Running pkgsite</h2>

<h3 id="a-simple-pkgsite">A simple pkgsite</h3>

<p>You can run a simple pkgsite with <code class="language-plaintext highlighter-rouge">go run cmd/pkgsite/main.go -proxy=URL</code>, but
it is only hosts documentation for a single repo. So, we’ll move on from this.</p>

<h3 id="standing-up-a-real-pkgsite">Standing up a real pkgsite</h3>

<p>We’ll need five things running:</p>

<ul>
  <li>A go proxy server.</li>
  <li>A go index server.</li>
  <li>A postgres database.</li>
  <li>The pkgsite frontend.</li>
  <li>The pkgsite worker.</li>
</ul>

<h4 id="proxy">Proxy</h4>

<p>We’ll assume you already have a proxy server. But if not, check out
<a href="https://github.com/goproxy/goproxy">github.com/goproxy/goproxy</a> as one
option.</p>

<h4 id="index">Index</h4>

<p>A simple index server is given at
<a href="https://github.com/jeanbza/golang-index">github.com/jeanbza/golang-index</a>. You
may wish to build your own, though. Its role is simple, and described at
<a href="https://github.com/golang/pkgsite/blob/master/doc/design.md">github.com/golang/pkgsite/blob/master/doc/design.md</a>.</p>

<h4 id="postgres">Postgres</h4>

<p>There are numerous ways to run a postgres database. Here’s something quick,
written for a Mac, to get you started:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>postgresql@17
<span class="c"># Note: Don't forget the part where homebrew asks you to add to your PATH.</span>
<span class="c"># Note: homebrew may make $USERNAME the default username, not "postgres".</span>
brew services start postgresql@17
createdb discovery-db

<span class="c"># Now, let's set up the tables necessary by running all the migrations.</span>
go <span class="nb">install</span> <span class="nt">-tags</span> <span class="s1">'postgres'</span> github.com/golang-migrate/migrate/v4/cmd/migrate@latest
migrate <span class="nt">-source</span> file:migrations <span class="nt">-database</span> <span class="s2">"postgresql://</span><span class="nv">$GO_DISCOVERY_DATABASE_USER</span><span class="s2">@127.0.0.1:5432/discovery-db?sslmode=disable"</span> up
</code></pre></div></div>

<p>Check out your tables with,</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psql <span class="nt">-d</span> discovery-db
<span class="se">\d</span>t
</code></pre></div></div>

<h4 id="frontend">Frontend</h4>

<p>Now, let’s run the frontend:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>pkgsite
<span class="c"># You may need to set GO_DISCOVERY_DATABASE_USER=myusername.</span>
go run cmd/frontend/main.go <span class="se">\</span>
    <span class="nt">-local</span> <span class="se">\</span>
    <span class="nt">-proxy_url</span><span class="o">=</span>https://url-to-my-proxy <span class="se">\</span>
    <span class="nt">-bypass_license_check</span><span class="o">=</span><span class="nb">true</span>
</code></pre></div></div>

<h4 id="worker">Worker</h4>

<p>Finally, let’s run the worker:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># You may need to set GO_DISCOVERY_DATABASE_USER=myusername.</span>
<span class="nv">GO_MODULE_PROXY_URL</span><span class="o">=</span>https://url-to-my-proxy <span class="se">\</span>
    <span class="nv">GO_MODULE_INDEX_URL</span><span class="o">=</span>https://url-to-my-index <span class="se">\</span>
    go run cmd/worker/main.go <span class="se">\</span>
    <span class="nt">-bypass_license_check</span><span class="o">=</span><span class="nb">true</span>
</code></pre></div></div>

<p>Note: If you’re using <code class="language-plaintext highlighter-rouge">github.com/jeanbza/golang-index</code>, the proxy runs (as of
this writing) at <code class="language-plaintext highlighter-rouge">http://localhost:8081</code>. You’ll note this is raw http. Trying
to run the worker with a non-TLS’d GO_MODULE_INDEX_URL will result in an error.
Get around this by making the worker accept a non-https index by commenting out
the https validation at <code class="language-plaintext highlighter-rouge">pkgsite/internal/index/index.go</code>’s <code class="language-plaintext highlighter-rouge">New()</code> function.</p>

<h3 id="poke-the-worker">Poke the worker</h3>

<p>The worker will periodically do work, but you can poke it by either visiting
http://localhost:8000 and clicking the poll/enqueue buttons, or by something
like,</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Assuming the worker is running at localhost:8000.</span>
<span class="k">while </span><span class="nb">true</span> <span class="p">;</span> <span class="k">do </span><span class="nb">date</span> <span class="o">&amp;&amp;</span> curl localhost:8000/enqueue <span class="o">&amp;&amp;</span> curl localhost:8000/poll <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>20<span class="p">;</span> <span class="k">done</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="see-the-results">See the results</h3>

<p>Check the “modules” page at http://localhost:8000 to see how the worker is
getting along.</p>

<p>As it progresses, it populates the postgres database. You should begin to start
seeing modules through the frontend. To do so, navigate to
http://localhost:8080, where the frontend is hosted.</p>

<h2 id="useful-debugging">Useful debugging</h2>

<p>I found the following db commands useful:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">psql</span> <span class="o">-</span><span class="n">d</span> <span class="n">discovery</span><span class="o">-</span><span class="n">db</span>

<span class="o">#</span> <span class="n">List</span> <span class="n">tables</span><span class="p">.</span>
<span class="err">\</span><span class="n">dt</span>

<span class="o">#</span> <span class="k">Show</span> <span class="n">upcoming</span> <span class="n">processing</span><span class="p">.</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">module_version_states</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="n">module_path</span><span class="p">,</span> <span class="n">last_processed_at</span><span class="p">,</span> <span class="n">next_processed_after</span> <span class="k">FROM</span> <span class="n">module_version_states</span><span class="p">;</span>

<span class="o">#</span> <span class="k">Update</span> <span class="n">processing</span> <span class="nb">time</span><span class="p">.</span>
<span class="k">UPDATE</span> <span class="n">module_version_states</span> <span class="k">SET</span> <span class="n">next_processed_after</span> <span class="o">=</span> <span class="n">next_processed_after</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'2 HOUR'</span><span class="p">;</span>

<span class="o">#</span> <span class="n">How</span> <span class="n">many</span> <span class="n">we</span> <span class="n">know</span> <span class="n">about</span><span class="p">.</span>
<span class="k">SELECT</span> <span class="k">DISTINCT</span><span class="p">(</span><span class="n">module_path</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">modules</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="k">version</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">modules</span><span class="p">;</span>

<span class="o">#</span> <span class="k">Drop</span> <span class="n">it</span> <span class="k">all</span> <span class="k">and</span> <span class="k">start</span> <span class="n">over</span><span class="p">.</span>
<span class="k">TRUNCATE</span> <span class="n">documentation</span><span class="p">,</span> <span class="n">documentation_symbols</span><span class="p">,</span> <span class="n">excluded_prefixes</span><span class="p">,</span> <span class="n">imports</span><span class="p">,</span> <span class="n">imports_unique</span><span class="p">,</span> <span class="n">latest_module_versions</span><span class="p">,</span> <span class="n">legacy_documentation_symbols</span><span class="p">,</span> <span class="n">licenses</span><span class="p">,</span> <span class="n">module_version_states</span><span class="p">,</span> <span class="n">modules</span><span class="p">,</span> <span class="n">package_symbols</span><span class="p">,</span> <span class="n">package_version_states</span><span class="p">,</span> <span class="n">paths</span><span class="p">,</span> <span class="n">readmes</span><span class="p">,</span> <span class="n">search_documents</span><span class="p">,</span> <span class="n">symbol_history</span><span class="p">,</span> <span class="n">symbol_names</span><span class="p">,</span> <span class="n">symbol_search_documents</span><span class="p">,</span> <span class="n">units</span><span class="p">,</span> <span class="n">version_map</span><span class="p">;</span>
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[Who this is for]]></summary></entry><entry><title type="html">Engineering resources from Google</title><link href="http://localhost:4000/2022/12/07/google-resources.html" rel="alternate" type="text/html" title="Engineering resources from Google" /><published>2022-12-07T00:55:23-07:00</published><updated>2022-12-07T00:55:23-07:00</updated><id>http://localhost:4000/2022/12/07/google-resources</id><content type="html" xml:base="http://localhost:4000/2022/12/07/google-resources.html"><![CDATA[<h1 id="engineering-resources-from-google">Engineering resources from Google</h1>

<p>This is a collection of extremely useful internal resources, which are made
publicly available. I thought I’d share these, since they are a bit hard to find
externally. And, they really are fantastic - years and years of tweaks and
discussions and refinement have gone into these, from some of the great minds
of computer science.</p>

<p>So, enjoy, as I have:</p>

<h2 id="the-swe-book">The “SWE book”</h2>

<p><a href="https://abseil.io/resources/swe-book">https://abseil.io/resources/swe-book</a></p>

<p>The “SWE book” - Google Engineering Practices Documentation. A classic.</p>

<h2 id="the-sre-book">The “SRE book”</h2>

<p><a href="https://sre.google/sre-book/table-of-contents/">https://sre.google/sre-book/table-of-contents/</a></p>

<p>Another classic, more on the operation side of things.</p>

<h2 id="how-to-code-review">How to code review</h2>

<p><a href="https://google.github.io/eng-practices/">https://google.github.io/eng-practices/</a></p>

<p>The page is called “Google Engineering Practices Documentation” because the
internal version is more broad, but the external version has the bits about how
reviewers and reviewees of code changes should interact. These are <em>fantastic</em>
guidelines for a healthy engineering culture.</p>

<h2 id="the-go-style-guide">The Go style guide</h2>

<p><a href="https://google.github.io/styleguide/go/">https://google.github.io/styleguide/go/</a></p>

<p>How to write “good” Go code at Google. Some of it is convention, but a lot of it
is sensical and very well thought out rules of the road when writing Go code.</p>

<p>(I’m biased, having contributed some of these sections!)</p>

<h2 id="other-language-style-guides">Other language style guides</h2>

<p><a href="https://google.github.io/styleguide/">https://google.github.io/styleguide/</a></p>

<p>Well, I mostly care about Go, hence the callout, but here are the other language
styleguide.</p>

<p>I’ll also call out the C++ as being fantastic. I’ve not used the others as much
but I expect them all to be of a very high quality.</p>

<h1 id="post-note">Post-note</h1>

<p>I will continue editing this article as I find more. Stay tuned!</p>

<p>(I wonder if this will turn into a “How to re-create Google’s engineering department in your company”… 🤔)</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Engineering resources from Google]]></summary></entry><entry><title type="html">Interfaces in depth</title><link href="http://localhost:4000/2022/12/05/interfaces.html" rel="alternate" type="text/html" title="Interfaces in depth" /><published>2022-12-05T00:55:23-07:00</published><updated>2022-12-05T00:55:23-07:00</updated><id>http://localhost:4000/2022/12/05/interfaces</id><content type="html" xml:base="http://localhost:4000/2022/12/05/interfaces.html"><![CDATA[<h2 id="foreword">Foreword</h2>

<p>A conversation with a colleague inspired a deep dive into the refspec, to gain
concrete understanding on some things I had until then only had intuitions
about. I ended up writing nearly an article to that colleague in chat
(sorry colleague…), so I thought I’d take it over the finish line and actually
write the article that my chat message was trying to be.</p>

<p>This is that article.</p>

<h2 id="impetus">Impetus</h2>

<p>This article is inspired by the following confusion:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">myInterface</span> <span class="k">interface</span><span class="p">{</span> <span class="n">hello</span><span class="p">()</span> <span class="p">}</span>
<span class="k">var</span> <span class="n">m1</span> <span class="n">myInterface</span> <span class="o">=</span> <span class="n">implementsMyInterface</span><span class="p">{}</span>
<span class="n">m1</span><span class="o">.</span><span class="n">hello</span><span class="p">()</span> <span class="c">// works!</span>
<span class="k">var</span> <span class="n">m2</span> <span class="o">*</span><span class="n">myInterface</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">m1</span>
<span class="n">m2</span><span class="o">.</span><span class="n">hello</span><span class="p">()</span> <span class="c">// does not work</span>
</code></pre></div></div>

<p><a href="https://go.dev/play/p/g56XEBk_OLs">play/p/g56XEBk_OLs</a></p>

<p>The core question is: Why can we use <code class="language-plaintext highlighter-rouge">m1</code>, not <code class="language-plaintext highlighter-rouge">m2</code>?</p>

<p><strong>TLDR</strong>: Go veterans will realise that pointer to interface is an anti-pattern.
It represents kind of a misunderstanding of what’s going on: the user almost
certainly wants a pointer to the <em>struct</em>. Both concrete structs and pointer to
structs can implement interfaces. That’s the intuition I mentioned above. But,
let’s dive into this a bit and figure out what’s behind this.</p>

<h2 id="what-are-interfaces-anyway">What are interfaces, anyway?</h2>

<p>From <a href="https://go.dev/blog/laws-of-reflection">Laws of reflection</a>,</p>

<blockquote>
  <p>A variable of interface type stores a pair: the concrete value assigned to the
variable, and that value’s type descriptor.</p>
</blockquote>

<p>So, I’ll simplify this a bit to the hand-wavy description that an interface type
points to a concrete type. For example, consider an interface type that is
implemented by a struct:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">foo</span> <span class="n">someInterface</span> <span class="o">=</span> <span class="n">someStruct</span><span class="p">{}</span>
</code></pre></div></div>

<p>Here, <code class="language-plaintext highlighter-rouge">foo</code> is a variable whose type is <code class="language-plaintext highlighter-rouge">someInterface</code>. Its interface type
“points” (“holds” / “is assigned” / etc) to <code class="language-plaintext highlighter-rouge">someStruct</code>.</p>

<p>Let’s modify that a bit:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">foo</span> <span class="n">someInterface</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">someStruct</span><span class="p">{}</span>
</code></pre></div></div>

<p>Here, <code class="language-plaintext highlighter-rouge">foo</code> is a variable whose type is <code class="language-plaintext highlighter-rouge">someInterface</code> which points to a
pointer which points to <code class="language-plaintext highlighter-rouge">someStruct</code>.</p>

<p>Ok… still in normal territory. Now let’s go back to where this question came
from and consider if <code class="language-plaintext highlighter-rouge">foo</code> was of type <code class="language-plaintext highlighter-rouge">*someInterface</code> instead:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">foo</span> <span class="n">someInterface</span> <span class="o">=</span> <span class="n">someStruct</span><span class="p">{}</span>
<span class="k">var</span> <span class="n">bar</span> <span class="n">someInterface</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">someStruct</span><span class="p">{}</span>

<span class="k">var</span> <span class="n">gaz</span> <span class="o">*</span><span class="n">someInterface</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">foo</span> <span class="c">// bad</span>
<span class="k">var</span> <span class="n">urk</span> <span class="o">*</span><span class="n">someInterface</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">bar</span> <span class="c">// also bad</span>
</code></pre></div></div>

<p>Here, <code class="language-plaintext highlighter-rouge">gaz</code> and <code class="language-plaintext highlighter-rouge">urk</code> are pointers to an interface. That’s almost certainly user
error. Pointers to structs are useful,</p>

<ul>
  <li>They allow us to avoid copying when passing structs around.</li>
  <li>They allow us to modify and persist struct state.</li>
</ul>

<p>But, what does a pointer to an interface type give us? Nothing!</p>

<ul>
  <li>An interface type is already a type of pointer as it is, so there’s no copying
when we pass it around.</li>
  <li>An interface type has no state itself. Its implementing type - a struct - can,
but not the interface itself. So there’s no modify/persist state benefit.</li>
</ul>

<h2 id="interfaces-behave-different-than-structs">Interfaces behave different than structs</h2>

<p>Ok, so we’ve talked about how interfaces are fundamentally different, and that
variables conceptually should (usually) not use interface pointer types; in
constrast to structs, where pointers to structs are very common and useful.</p>

<p>Now let’s look at how struct and interface types behave differently with regards
to pointer referencing and dereferencing. Let’s do so by collecting together a
few facts about interfaces from the refspec, to prepare for our conclusion:</p>

<h3 id="a-struct-can-implement-an-interface-with-concrete-or-pointer-method-receivers">A struct can implement an interface with concrete or pointer method receivers</h3>

<p>A struct can implement an interface with either concrete or pointer method
receivers. Per
<a href="https://go.dev/ref/spec#Interface_types">ref/spec#Interface_types</a>, there’s no
way to specify concrete or pointer method receiver in an interface. (indeed,
it’s moot to the interface: the interface defines, well, the interface, not the
implementation details)</p>

<p>Concretely, both these structs implement the interface:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">myInterface</span> <span class="k">interface</span><span class="p">{</span> <span class="n">hello</span><span class="p">()</span> <span class="p">}</span>

<span class="k">type</span> <span class="n">concreteMethodReceivers</span> <span class="k">struct</span><span class="p">{}</span>
<span class="k">func</span> <span class="p">(</span><span class="n">m</span> <span class="n">concreteMethodReceivers</span><span class="p">)</span> <span class="n">hello</span><span class="p">()</span> <span class="p">{}</span>

<span class="k">type</span> <span class="n">pointerMethodReceivers</span> <span class="k">struct</span><span class="p">{}</span>
<span class="k">func</span> <span class="p">(</span><span class="n">m</span> <span class="o">*</span><span class="n">pointerMethodReceivers</span><span class="p">)</span> <span class="n">hello</span><span class="p">()</span> <span class="p">{}</span>
</code></pre></div></div>

<p><a href="https://go.dev/play/p/sjU9d72ZWzw">play/p/sjU9d72ZWzw</a></p>

<h3 id="selectors-automatically-dereference-pointers-to-structs">Selectors automatically dereference pointers to structs</h3>

<p>Selectors automatically dereference pointers to structs <a href="https://go.dev/ref/spec#Method_values">ref/spec#Method_values</a>:</p>

<blockquote>
  <p>As with selectors, a reference to a non-interface method with a value receiver using a pointer will automatically dereference that pointer: pt.Mv is equivalent to (*pt).Mv.</p>
</blockquote>

<p>So, for implementing interfaces:</p>

<ul>
  <li>If you have a struct that implements the interface with
<em>concrete method receivers</em>, you can use either concrete struct or pointer
to your struct as type for interface (latter will be de-referenced).</li>
  <li>If you have a struct that implements the interface with
<em>pointer method receivers</em>, you have to use pointer to your struct as type
for interface (concrete struct <em>won’t</em> be automatically turned to pointer).</li>
</ul>

<p>Concretely:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">f1</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">concreteMethodReceiverStruct</span><span class="p">{}</span>
<span class="n">f1</span><span class="o">.</span><span class="n">Hello</span><span class="p">()</span> <span class="c">// works</span>

<span class="k">var</span> <span class="n">f2</span> <span class="n">foo</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">concreteMethodReceiverStruct</span><span class="p">{}</span>
<span class="n">f2</span><span class="o">.</span><span class="n">Hello</span><span class="p">()</span> <span class="c">// works</span>

<span class="k">var</span> <span class="n">f3</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">pointerMethodReceiverStruct</span><span class="p">{}</span>
<span class="n">f3</span><span class="o">.</span><span class="n">Hello</span><span class="p">()</span> <span class="c">// does not work</span>

<span class="k">var</span> <span class="n">f4</span> <span class="n">foo</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pointerMethodReceiverStruct</span><span class="p">{}</span>
<span class="n">f4</span><span class="o">.</span><span class="n">Hello</span><span class="p">()</span> <span class="c">// works</span>
</code></pre></div></div>

<p><a href="https://go.dev/play/p/aWQ8C2-SwZ2">play/p/aWQ8C2-SwZ2</a></p>

<h3 id="pointers-to-interfaces-do-not-automatically-dereference">Pointers to interfaces do not automatically dereference</h3>

<p>Pointers to interfaces do not automatically dereference, like pointers to
structs do. (they used to in pre-Go1, fwiw; <a href="https://groups.google.com/g/golang-nuts/c/RhIIHM3XC4o">g/golang-nuts/c/RhIIHM3XC4o</a>)</p>

<p>Concretely:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">thing</span> <span class="n">myInterface</span> <span class="o">=</span> <span class="n">myStruct</span><span class="p">{}</span>
<span class="n">thing</span><span class="o">.</span><span class="n">Whatever</span><span class="p">()</span> <span class="c">// works</span>
<span class="k">var</span> <span class="n">thing2</span> <span class="o">*</span><span class="n">myInterface</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">thing</span>
<span class="n">thing2</span><span class="o">.</span><span class="n">Whatever</span><span class="p">()</span> <span class="c">// does not work</span>
</code></pre></div></div>

<p><a href="https://go.dev/play/p/9QBQmO4-nZN">play/p/9QBQmO4-nZN</a></p>

<h2 id="putting-it-all-together">Putting it all together</h2>

<p>So, let’s talk about the various ways you can declare and use an <strong>interface</strong>.
As mentioned before and shown with
<a href="https://go.dev/play/p/aWQ8C2-SwZ2">play/p/aWQ8C2-SwZ2</a>:</p>

<ul>
  <li>✅ can implement interface with concrete type method receiver + concrete type</li>
  <li>✅ can implement interface with concrete type method receiver + pointer type (<em>auto de-reference</em>)</li>
  <li>❌ can implement interface with pointer type method receiver + concrete type (<em>no auto reference</em>)</li>
  <li>✅ can implement interface with pointer type method receiver + pointer type</li>
</ul>

<p>Now, let’s contrast that with the various ways that you can declare and use a
<strong>struct</strong>. As shown with
<a href="https://go.dev/play/p/IfD0MGTLT_n">play/p/IfD0MGTLT_n</a> and spelled out in
<a href="https://go.dev/ref/spec#Method_values">ref/spec#Method_values</a>:</p>

<ul>
  <li>✅ can call concrete type method receiver with concrete type</li>
  <li>✅ can call pointer type method receiver with concrete type (<em>auto reference</em>)</li>
  <li>✅ can call concrete type method receiver with pointer type (<em>auto de-reference</em>)</li>
  <li>✅ can call pointer type method receiver with pointer type</li>
</ul>

<p>So, the rules for structs and interfaces are different, to prevent interface
mis-use.</p>

<h2 id="afterword">Afterword</h2>

<p>You can read more about how interfaces are represented here:</p>

<ul>
  <li><a href="https://research.swtch.com/interfaces">Go Data Structures: Interfaces</a> by rsc@</li>
  <li><a href="https://www.airs.com/blog/archives/277">Go Interfaces</a> by iant@</li>
  <li><a href="https://go.dev/blog/laws-of-reflection">Laws of Reflection</a> by r@</li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[Foreword]]></summary></entry><entry><title type="html">Graceful degradation with the logistic function</title><link href="http://localhost:4000/2022/05/05/logistic-function-backoff.html" rel="alternate" type="text/html" title="Graceful degradation with the logistic function" /><published>2022-05-05T15:55:23-06:00</published><updated>2022-05-05T15:55:23-06:00</updated><id>http://localhost:4000/2022/05/05/logistic-function-backoff</id><content type="html" xml:base="http://localhost:4000/2022/05/05/logistic-function-backoff.html"><![CDATA[<h1 id="graceful-degradation-with-the-logistic-function">Graceful degradation with the logistic function</h1>

<p>I recently worked on a server throttling feature in one of our build stack’s busiest binaries. We serve files from this binary, which is deployed as tens of thousands of tasks, which cumulatively serve millions of QPS.</p>

<p>Sometimes, one of these tasks gets a large memory spike. The cause for this is that the task is asked to hold a single file, and before it gets replicated, the file is needed by tens of thousands of peers, who all bombard the task with RPCs. Handling all these requests causes a huge spike in memory, and the task falls over.</p>

<p>Eventually replication catches up, and there are enough peers to spread the load. But we’d like to fail more gracefully than just OOM =&gt; death. We’d like to monitor the current and allocated memory, and gradually reject requests (throttle) when current memory exceeds allocated memory.</p>

<h1 id="abrupt-degradation">Abrupt degradation</h1>

<p>A simple way to abruptly degrade is to reject requests above the allocated amount. We can model that with a simple step function. For the sake of example, let’s imagine that our allocated memory is <code class="language-plaintext highlighter-rouge">3GiB = 3221225472 bytes</code>. We don’t want to hit 3GiB exactly, since that’s roughly where we’ll OOM, so let’s start throttling a bit before that: at <code class="language-plaintext highlighter-rouge">3000000000 bytes = 3e9 bytes</code> (number chosen because it’s conveniently round, and close to 3GiB 🙂).</p>

\[f(x) = \left\{
        \begin{array}{ll}
            1 &amp; \quad x \ge 3e9 \\
            0 &amp; \quad x &lt; 3e9
        \end{array}
    \right.\]

<p>Here, 0 means “don’t reject”, and 1 means “reject”.</p>

<p>But, this is inefficient: we’re not using all our available memory. In a resource constrained environment, or when we’re highly scaled, we really want to squeeze every bit of memory that we can, and leaving a huge buffer untouched is far too wasteful.</p>

<h1 id="gradual-degradation">Gradual degradation</h1>

<p>It’s starting to sound like we need a linear function, not a stepwise function: something that rejects more and more requests the more memory we’re using. We now need a range to operate our throttler within: at the bottom of the range, we reject no requests; at the top, all requests.</p>

<p>Let’s define our range as <code class="language-plaintext highlighter-rouge">[3e9 bytes, 3221225472 bytes]</code>, using the same bounds as our step function above.</p>

<p>So, let’s build a linear function for this. Note that the values that we want from our linear function are <code class="language-plaintext highlighter-rouge">[0.0, 1.0]</code>. As above, 0 means “don’t reject”, and 1 means “reject”. Any value between that represents that chance that a request will be rejected. That is, we’ll compare the result of our linear function against a number taken randomly from a uniform distribution of <code class="language-plaintext highlighter-rouge">[0.0, 1.0]</code>.</p>

<p>To build this linear function, let’s start with what we know:</p>

<ul>
  <li>Linear functions look like $f(x)=a \cdot x + b$</li>
  <li>$f(3e9)=0$</li>
  <li>$f(3221225472)=1$</li>
</ul>

<p>We can use this to solve the equation:</p>

\[\begin{split}
0 = a \cdot 3e9 + b\\
-b = 3e9 \cdot a\\
b = -3e9 \cdot a
\end{split}
\quad\quad
\begin{split}
1 = a \cdot 3221225472 + b\\
1 - b = a \cdot 3221225472\\
-b = a \cdot 3221225472 - 1\\
b = -a \cdot 3221225472 + 1
\end{split}\\ \text{ } \\ \text{ } \\
-3e9 \cdot a = -a \cdot 3221225472 + 1 \\
-3e9 \cdot a + a \cdot 3221225472 = 1 \\
a \cdot (-3e9 + 3221225472) = 1 \\
a = 1/221225472\]

<p>Now that we know <code class="language-plaintext highlighter-rouge">a</code>, let’s use that and either of the two partial solutions above to find <code class="language-plaintext highlighter-rouge">b</code>:</p>

\[1 = a \cdot 3221225472 + b\\
1 = 3221225472/221225472 + b\\
b = 1 - 3221225472/221225472\\
b = -1953125/144027\]

<p>Our stepwise function accordingly gets an embedded linear function:</p>

\[f(x) = \left\{
        \begin{array}{ll}
            x/221225472 - 1953125/144027  &amp; \quad x \ge 3e9 \\
            0 &amp; \quad x &lt; 3e9
        \end{array}
    \right.\]

<p><img src="/assets/linear.png" alt="" /></p>

<p>We can verify that this works by plugging in our original numbers:</p>

\[\begin{split}
f(x) = x/221225472 - 1953125/144027\\
f(x) = 3e9/221225472 - 1953125/144027\\
f(x) = 0
\end{split}
\quad\quad
\begin{split}
f(x) = x/221225472 - 1953125/144027\\
f(x) = 3221225472/221225472 - 1953125/144027\\
f(x) = 1
\end{split}\\\]

<h1 id="linear-function-downsides">Linear function downsides</h1>

<p>This is a lot nicer, but we can do better. If our binary is <em>expected</em> to consistently “run hot” (use most of its allocated memory), the linear function may be too aggressive.</p>

<p>Consider a binary that fairly consistently runs somewhere in the bottom 10-30% of the throttle memory range. A linear function will accordingly throttle 10-30% of requests. That’s expensive! Particularly if the incoming RPCs have a wide range of memory footprints: throttling 10-30% of requests when those requests may have negligible impact on memory is wasteful. And we can’t just make our memory range smaller. Doing so is dangerous: the smaller the range, the easier it is for a request to cause our memory to jump to the end of the range and OOM the process.</p>

<p>And, the second half of the linear function range is a problem too: it ramps up too slowly! When we’re 90% into our range, we’d like to be throttling most all requests, since it may only take a few expensive requests to jump right to the end and OOM the process.</p>

<p>We need to find a function with a better shape.</p>

<h1 id="graceful-degradation">Graceful degradation</h1>

<p>The <a href="https://en.wikipedia.org/wiki/Logistic_function">logistic function</a> has a better shape for server throttling.</p>

<p>Here’s the shape of the logistic function:</p>

<p><img src="/assets/logistic.png" alt="" /></p>

<p>Its S-shaped curve allows more requests through when we’re at the bottom of our range, and aggressively throttles at the end of our range.</p>

<p>The equation for the logistic function is as follows,</p>

\[\begin{align*}
f(x) = \dfrac{L}{1 + e^{-k(x-x_0)}}
\end{align*}\]

<p>Where,</p>

<ul>
  <li>$x_0$ is the x value of the sigmoid’s midpoint</li>
  <li>L is the curve’s maximum value</li>
  <li>k is the logistic growth rate or steepness of the curve</li>
</ul>

<p>Let’s adapt this to our problem:</p>

<p>L is the easiest: we want the maximum value to be 1 (we want our range to be <code class="language-plaintext highlighter-rouge">[0.0, 1.0]</code>), So, <code class="language-plaintext highlighter-rouge">L=1</code>.</p>

<p>$x_0$ is fairly straightforward: the midpont should be the midpoint between the start and end of our range. So,</p>

\[\begin{align}
x_0 = 3221225472-\left(\dfrac{3221225472-3e9}{2}\right)\\
x_0 = 3110612736
\end{align}\]

<p>Now we have,</p>

\[\begin{align*}
f(x) = \dfrac{L}{1 + e^{-k(x-x_0)}}\\
f(x) = \dfrac{1}{1 + e^{-k(x-3110612736)}}
\end{align*}\]

<p>k is the hardest. Let’s start by solving for k in the equation above:</p>

\[\begin{align*}
f(x) = \dfrac{1}{1 + e^{-k\left(x-3110612736\right)}}\\
f(x)\left(1 + e^{-k(x-3110612736)}\right) = 1\\
1 + e^{-k(x-3110612736)} = \dfrac{1}{f(x)}\\
e^{-k(x-3110612736)} = \dfrac{1}{f(x)}-1\\
-k(x-3110612736) = ln\left(\dfrac{1}{f(x)}-1\right)\\
k(x-3110612736) = -ln\left(\dfrac{1}{f(x)}-1\right)\\
k = \dfrac{-ln\left(\dfrac{1}{f(x)}-1\right)}{x-3110612736}\\
\end{align*}\]

<p>Now we return to what we know about how this curve <em>should</em> behave:</p>

<ul>
  <li>$f(3e9)=0$</li>
  <li>$f(3221225472)=1$</li>
</ul>

<p>Unfortunately, using either of these results in an unsolvable equation:</p>

\[\begin{split}
k = \dfrac{-ln\left(\dfrac{1}{f(x)}-1\right)}{x-3110612736}\\
k = \dfrac{-ln\left(\dfrac{1}{0}-1\right)}{3e9-3110612736}\\
\text{NaN: can't divide by 0}
\end{split}
\quad\quad
\begin{split}
k = \dfrac{-ln\left(\dfrac{1}{f(x)}-1\right)}{x-3110612736}\\
k = \dfrac{-ln\left(\dfrac{1}{1}-1\right)}{3221225472-3110612736}\\
k = \dfrac{-ln(0)}{3221225472-3110612736}\\
\text{NaN: natural log of 0 is undefined}
\end{split}\]

<p>So, that’s a bummer. But it makes sense: the logistic function is asymptotic, with asymptotes 0 and 1: it will never actually reach those values!</p>

<p>So, let’s estimate k by choosing a value close to the asymptotes: either .01 for the lower bound, or .99 for the upper bound. It doesn’t matter which one we do, as the curve is reflected around the midpoint. So, let’s use the upper:</p>

\[k = \dfrac{-ln\left(\dfrac{1}{f(x)}-1\right)}{x-3110612736}\\
k = \dfrac{-ln\left(\dfrac{1}{.99}-1\right)}{3221225472-3110612736}\\
k = \dfrac{-ln(0.0101010101)}{110612736}\\
k = \dfrac{4.59511985023}{110612736}\\
k = \dfrac{4.595119}{110612736}\\
k = .0000000415424043\]

<p>Great! Let’s put it all together:</p>

\[\begin{align*}
f(x) = \dfrac{L}{1 + e^{-k(x-x_0)}}\\
f(x) = \dfrac{1}{1 + e^{-.0000000415424043(x-3110612736)}}
\end{align*}\]

<p><img src="/assets/logistic_real.png" alt="" /></p>

<p>We can verify that this works by plugging in our original numbers:</p>

\[\begin{split}
f(x) = \dfrac{1}{1 + e^{-.0000000415424043(x-3110612736)}}\\
f(x) = \dfrac{1}{1 + e^{-.0000000415424043(3e9-3110612736)}}\\
f(x) = 0.01000000841
\end{split}
\quad\quad
\begin{split}
f(x) = \dfrac{1}{1 + e^{-.0000000415424043(x-3110612736)}}\\
f(x) = \dfrac{1}{1 + e^{-.0000000415424043(3221225472-3110612736)}}\\
f(x) = 0.98999999158
\end{split}\\\]

<p>Since we’re approximating values and will never reach 0 or 1, it’s helpful to continue using the stepwise function to guarantee no throttling when we’re below our threshold, and to always throttle when we’re above our allowable range:</p>

\[f(x) = \left\{
        \begin{array}{ll}
            1 &amp; \quad x \ge 3221225472 \\
            \dfrac{1}{1 + e^{-.0000000415424043(x-3110612736)}}  &amp; \quad 3e9 \le x &lt; 3221225472  \\
            0 &amp; \quad x &lt; 3e9
        \end{array}
    \right.\]

<h1 id="implementing-logistic-function-server-throttling">Implementing logistic function server throttling</h1>

<p>Implementing server throttling with the logistic function is fairly straight forward, adding another positive to its list of positives:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// This example written in Go. It uses RPC semantics, like protobufs and</span>
<span class="c">// google.golang.org/grpc/status, but the tools don't really matter. http or any</span>
<span class="c">// other communication protocol works as well.</span>

<span class="k">func</span> <span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">Client</span><span class="p">)</span> <span class="n">HandleSomeRPC</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">req</span> <span class="o">*</span><span class="n">mypb</span><span class="o">.</span><span class="n">Request</span><span class="p">,</span> <span class="n">resp</span> <span class="o">*</span><span class="n">mypb</span><span class="o">.</span><span class="n">Response</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
  <span class="k">if</span> <span class="n">shouldThrottle</span><span class="p">(</span><span class="n">currentMemoryBytes</span><span class="p">(),</span> <span class="n">allocatedMemoryBytes</span><span class="p">(),</span> <span class="n">throttleRangeBytes</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">status</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">ResourceExhausted</span><span class="p">,</span> <span class="s">"out of memory - try again later"</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="c">// ...</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">shouldThrottle</span><span class="p">(</span><span class="n">currentMemoryBytes</span><span class="p">,</span> <span class="n">allocatedMemoryBytes</span><span class="p">,</span> <span class="n">throttleRangeBytes</span> <span class="kt">uint64</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="k">if</span> <span class="n">currentMemoryBytes</span> <span class="o">&lt;</span> <span class="n">allocatedMemoryBytes</span><span class="o">-</span><span class="n">throttleRangeBytes</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">false</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="n">currentMemoryBytes</span> <span class="o">&gt;</span> <span class="n">allocatedMemoryBytes</span><span class="o">+</span><span class="n">throttleRangeBytes</span> <span class="p">{</span>
		<span class="c">// Relevant if your process is in a scenario where max available memory</span>
		<span class="c">// is greater than max allocated memory (shared containers etc).</span>
		<span class="k">return</span> <span class="no">true</span>
	<span class="p">}</span>

	<span class="n">x</span> <span class="o">:=</span> <span class="n">currentMemoryBytes</span>
	<span class="n">x0</span> <span class="o">:=</span> <span class="n">allocatedMemoryBytes</span> <span class="o">-</span> <span class="p">(</span><span class="kt">uint64</span><span class="p">)(</span><span class="n">throttleRangeBytes</span><span class="o">/</span><span class="m">2</span><span class="p">)</span>
	<span class="n">L</span> <span class="o">:=</span> <span class="m">1.0</span>
	<span class="n">k</span> <span class="o">:=</span> <span class="p">(</span><span class="o">-</span><span class="m">1</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">Log</span><span class="p">((</span><span class="n">L</span><span class="o">/</span><span class="m">.01</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">))</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float64</span><span class="p">)(</span><span class="n">allocatedMemoryBytes</span><span class="o">-</span><span class="n">x0</span><span class="p">)</span>

	<span class="c">// y1 is probability (0.00-1.00) which we roll against to determine whether</span>
	<span class="c">// to throttle or not. When it is 0, we never throttle (memory below allowed</span>
	<span class="c">// exceed). When it is 1, we always throttle (memory above allowed exceed).</span>
	<span class="n">y1</span> <span class="o">:=</span> <span class="n">L</span> <span class="o">/</span> <span class="p">(</span><span class="m">1.0</span> <span class="o">+</span> <span class="n">math</span><span class="o">.</span><span class="n">Exp</span><span class="p">(</span><span class="o">-</span><span class="n">k</span><span class="o">*</span><span class="p">(</span><span class="kt">float64</span><span class="p">)(</span><span class="n">x</span><span class="o">-</span><span class="n">x0</span><span class="p">)))</span>

	<span class="c">// y2 is a number between 0 and 1 to compare against y1.</span>
	<span class="n">y2</span> <span class="o">:=</span> <span class="n">rand</span><span class="o">.</span><span class="n">Float64</span><span class="p">()</span>

	<span class="k">return</span> <span class="n">y2</span> <span class="o">&lt;=</span> <span class="n">y1</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="conclusion">Conclusion</h1>

<p>At tremendous scale, it’s important to eke every last bit of memory from servers. It’s also important to be able to gracefully degrade during memory spikes, to avoid out-of-memory crashes. The logistic function is an excellent function for deciding whether to throttle requests, which strikes a good balance between the competing priorities of using all available memory and avoiding out-of-memory crashes.</p>

<script type="text/javascript" async="" src="/assets/MathJax-2.7.9/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      tex2jax: {
        inlineMath: [ ['$','$'], ["\\(","\\)"] ],
        processEscapes: true
      },
      extensions: [
        "MathMenu.js",
        "MathZoom.js",
        "AssistiveMML.js"
      ],
      jax: ["input/TeX", "output/CommonHTML"],
      TeX: {
        extensions: [
          "AMSmath.js",
          "AMSsymbols.js",
          "noErrors.js",
          "noUndefined.js",
        ]
      }
    });
  </script>]]></content><author><name></name></author><summary type="html"><![CDATA[Graceful degradation with the logistic function]]></summary></entry><entry><title type="html">Wrapped errors are stacks</title><link href="http://localhost:4000/2022/02/09/wrapped-errors-are-stacks.html" rel="alternate" type="text/html" title="Wrapped errors are stacks" /><published>2022-02-09T14:55:23-07:00</published><updated>2022-02-09T14:55:23-07:00</updated><id>http://localhost:4000/2022/02/09/wrapped-errors-are-stacks</id><content type="html" xml:base="http://localhost:4000/2022/02/09/wrapped-errors-are-stacks.html"><![CDATA[<h1 id="wrapped-errors-are-stacks">Wrapped errors are stacks</h1>

<p>Wrapping an error creates a stack: a linked list of error pointing to the next error, where newly wrapped errors are added to the head, and the stack is traversed from head to tail during As, Is, and with the Unwrap interface.</p>

<p>It’s important to keep this in mind when you’re designing the internal representation for your unwrappable structured error. The simplest representation is a single error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type decompressErr struct {
  name string
  err error // Points to the next error down the stack.
}

func (e *decompressErr) Error() string {
  return fmt.Sprintf("decompress %s: %s", e.name, e.err)  
}

func (e *decompressErr) Unwrap() error { return e.err }
</code></pre></div></div>

<p>Most unwrappable structured errors should only contain a single error. They have obvious semantics and are easy to use.</p>

<p>Unwrappable structured errors that contain multiple errors have much less clear semantics. Consider:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// We recommend against this approach.
type PathParseErrors struct {
  // A map of path to parse error for that path.
  errors map[string]error
}

func (e *PathParseErrors) Error() string {
  return fmt.Sprintf("%v", e.errors)
}

func (e *PathParseErrors) Unwrap() error {
  // Nothing we return here will be obvious.
}
</code></pre></div></div>

<p>In this example, the stack semantics are broken: we have an unwrappable structured error that contains a map of errors. But, which error will Unwrap return? There’s no right answer: any choice would be non-obvious to the user. A slice has the same issue as a map: there’s no obvious error to return.</p>

<p>This issue is exacerbated by the fact that it’s impossible for the author of PathParseErrors to document their Unwrap method in a way that will directly help users. Users often don’t interact with the Unwrap method directly: they use tools like As and Is, which themselves call the Unwrap method. And, this error may exist in a library that is several layers deep in a dependency tree: a user may have a very hard time finding the exact library whose documentation to go read when they’ve got an opaque stack of wrapped errors.</p>

<p>When you need to collect several errors at once, use <code class="language-plaintext highlighter-rouge">[]error</code>, a map of errors, or a structured error that does not support Unwrap.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Wrapped errors are stacks]]></summary></entry></feed>